buildscript {
    ext.kotlin_version = '1.2.10'
    ext.corda_release_version = '2.0.0'
    ext.corda_gradle_plugins_version = '1.0.0'
    ext.junit_version = '4.12'
    ext.quasar_version = '0.7.6'
    ext.spring_boot_version = '1.5.7.RELEASE'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
       // classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.9.RELEASE")
    }
}

repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
}

group 'etc-backend'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'net.corda.plugins.cordformation'
//apply plugin: 'org.springframework.boot'
apply plugin: 'net.corda.plugins.quasar-utils'

sourceSets {
    main {
        resources {
            srcDir "../config/dev"
        }
    }
}

sourceCompatibility = 1.8


dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    cordaCompile "net.corda:corda-core:$corda_release_version"
    cordaCompile "net.corda:corda-finance:$corda_release_version"
    cordaCompile "net.corda:corda-jackson:$corda_release_version"
    cordaCompile "net.corda:corda-rpc:$corda_release_version"
    cordaCompile "net.corda:corda-node-api:$corda_release_version"
    cordaRuntime "net.corda:corda:$corda_release_version"

    compile("org.springframework.boot:spring-boot-starter-websocket:$spring_boot_version")
    testCompile "net.corda:corda-node-driver:$corda_release_version"
    testCompile group: 'junit', name: 'junit', version: '4.12'

}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

jar {
    baseName = 'etc-backend'
    version =  '0.1.0'
}

task runPartyAServer(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.api.config.ServerConfig'
    environment "server.port", "8080"
    environment "config.rpc.port", "10006"
}

task runPartyBServer(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.api.config.ServerConfig'
    environment "server.port", "8081"
    environment "config.rpc.port", "10009"
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    directory "./build/nodes"
    networkMap "O=Controller,L=London,C=GB"
    node {
        name "O=Controller,L=London,C=GB"
        advertisedServices = ["corda.notary.validating"]
        p2pPort 10002
        rpcPort 10003
    }
    node {
        name "O=PartyA,L=London,C=GB"
        advertisedServices = []
        p2pPort 10005
        rpcPort 10006
        rpcUsers = [[ user: "user1", "password": "test", "permissions": []]]
    }
    node {
        name "O=PartyB,L=New York,C=US"
        advertisedServices = []
        p2pPort 10008
        rpcPort 10009
        rpcUsers = [[ user: "user1", "password": "test", "permissions": []]]
    }
}
